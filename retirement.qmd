---
title: "Retirement: Simulating wealth with random returns, inflation, and withdrawals"
format: dashboard
logo: retirement-logo.png
server: shiny
---

# Saving

## {.sidebar}

```{python}
#| context: setup
import inspect
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator
from shiny import render, reactive, ui
from bokeh.plotting import figure, show, output_file
from shinywidgets import render_widget
import bokeh.models as bm

def sims_matrix(rows, cols, mean, stdev):
    """Create a matrix of simulation adding noise (random numbers) about the mean and standard devation 'stdev'. Rows contain time and columns contain different simulations.
    """
    x = np.random.randn(rows, cols)
    x = mean + (x * stdev)
    return x

def growth(principal, rate, n, contribution):
    """Calculate new balance over 1-year time step with annual compounding interest and additional regular contributions. Agrees with https://www.moneygeek.com/compound-interest-calculator/ if n_p=n.

    Inputs:
        principal: float, starting account balance
        rate: float, average interest rate expressed as a decimal
        n: int or float, number of contributions. For monthly, use n=12.
        contribution: float, amount to be contributed n times.
    
    Output:
       New account balance after interest and contributions
    """
    t = 1
    compound_interest = principal * (1 + (rate / n)) ** (n * t)
    contributions = contribution * (((1 + (rate / n)) ** (n * t) - 1) / (rate / n))
    return np.round(compound_interest + contributions, 2)


def growth_simulation(start_capital, return_mean, return_stdev, raise_mean, raise_stdev, monthly_contribution, n_years=30, n_simulations=100):
    """Simulate investment growth from a starting amount under different pay raises and growth scenarios and with monthly contributions. The output of this calculator agrees, to a few cents, with The Calculator Site,
    https://www.thecalculatorsite.com/finance/calculators/compoundinterestcalculator.php.
    
    Inputs:
        start_capital: float, starting investment amount
        return_mean: float, average rate of return on investment as a percent
        return_stdev: float, standard deviation for return on investment
        raise_mean: float, average annual pay raise as a percent.    
            Used to adjust contributions.
        raise_stdev: float, standard deviation of annual pay raises
        monthly_contribution: float, amount to be contributed each month
        n_years: int, number of years to simulate drawdown
        n_simulations: int, number of simulations to generate
    
    Output:
        Dataframe of account balances over time (rows) for each simulation (columns).
    """
    # Convert mean and standard deviations from percents to decimals
    return_mean = return_mean / 100
    return_stdev = return_stdev / 100
    raise_mean = raise_mean / 100
    raise_stdev = raise_stdev / 100

    # Convert annual values to monthly (using volitility square root of time for stdev)
    n_months = 12 * n_years
    monthly_return_mean = return_mean / 12
    # monthly_return_mean = ((return_mean + 1) ** (1/12)) - 1
    monthly_return_stdev = return_stdev / np.sqrt(12)

    # Simulate returns and raises
    monthly_returns = sims_matrix(
        rows=n_months+12,
        cols=n_simulations,
        mean=monthly_return_mean,
        stdev=monthly_return_stdev)
    raises = sims_matrix(
        rows=n_years,
        cols=n_simulations, 
        mean=raise_mean+1,
        stdev=raise_stdev)

    # Contributions adjusted for annual inflation raises
    contributions = np.full((n_years+1, n_simulations),
                            float(monthly_contribution))
    for j in range(n_years):
        contributions[j+1, :] = contributions[j, :] * raises[j, :]
    contributions = np.repeat(contributions, 12, axis=0)
    contributions = np.concatenate((np.zeros((1, n_simulations)), contributions), axis=0)

    # Simulate growth
    sims = np.full((n_months+12, n_simulations), float(start_capital))
    for j in range(n_months+11):
        sims[j+1, :] = \
            growth(principal=sims[j, :],
                   rate=monthly_returns[j, :], n=1,
                   contribution=contributions[j+1, :])

    return pd.DataFrame(sims[:-11,:])


def growth_plot(nav_df, start_year=None):
    # Create plot
    p = figure(
            title='Projected retirement savings balance by year (age)',
            tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',
            outline_line_color=None)#, sizing_mode='scale_height')

    # Name simulations for legend
    nav_df.columns = [f'sim{i+1}' for i in nav_df.columns]

    # Create x-axis in years
    if start_year == None:
        thisYear = pd.to_datetime('today').year
    else:
        thisYear = int(start_year)
    xlabs = np.linspace(0, nav_df.shape[0]/12, num=nav_df.shape[0]) + thisYear
    nav_df['xlabs'] = xlabs

    # Plot the average
    nav_df['average'] = nav_df.drop('xlabs', axis=1).mean(1)
    nav_df['age'] = np.floor(nav_df['xlabs'] - 1986)
    source = bm.ColumnDataSource(nav_df)
    al = p.line(x='xlabs', y='average', color='blue', width=2, name='Average', source=source)
    p.varea(x='xlabs', y1=0, y2='average', color='lightblue', alpha=0.5, source=source)

    # Tools
    crosshair = bm.CrosshairTool(dimensions='height',
                                line_color='grey', line_alpha=0.5)
    hover = bm.HoverTool(mode='vline', renderers=[al])
    hover.tooltips = """
            <h2>${x}{0} | Age @{age}{0}</h2>
            @{average}{$0,0.00}
        """
    p.add_tools(hover, crosshair)
    p.toolbar.autohide = True

    # Format axes
    p.xaxis.formatter = bm.CustomJSTickFormatter(code="""
            return tick + " (" + (tick-1986) + ")"
        """)
    p.yaxis.formatter=bm.NumeralTickFormatter(format='$0,0')
    p.xgrid.grid_line_color = None

    return(p)
    # show(p)


def withdrawal_simulation(start_capital, return_mean, return_stdev, inflation_mean, inflation_stdev, monthly_withdrawal, n_years=30, n_simulations=100):
    """Simulate monthly withdrawals from a starting investment amount under different inflation and growth scenarios.
    
    Inputs:
        start_capital: float, starting investment amount
        return_mean: float, average rate of return on investment as a percent
        return_stdev: float, standard deviation for return on investment
        inflation_mean: float, average rate of inflation as a percent
        inflation_stdev: float, standard deviation of inflation
        monthly_withdrawal: float, amount to be withdrawn each month
        n_years: int, number of years to simulate drawdown
        n_simulations: int, number of simulations to generate
    
    Output:
        Dataframe of account balances over time (rows) for each simulation (columns).
    """
    # Convert mean percents to decimals
    if return_mean > 1:
        return_mean = return_mean / 100
    if inflation_mean > 1:
        inflation_mean = inflation_mean / 100

    # Convert annual values to monthly (using volitility square root of time for stdev)
    n_months = 12 * n_years
    monthly_return_mean = return_mean / 12
    monthly_return_stdev = return_stdev / np.sqrt(12)
    monthly_inflation_mean = inflation_mean / 12
    monthly_inflation_stdev = inflation_stdev / np.sqrt(12)

    # Simulate returns and inflation
    monthly_returns = sims_matrix(
        rows=n_months,
        cols=n_simulations,
        mean=monthly_return_mean,
        stdev=monthly_return_stdev)
    monthly_inflation = sims_matrix(
        rows=n_months,
        cols=n_simulations, 
        mean=monthly_inflation_mean,
        stdev=monthly_inflation_stdev)
    monthly_withdrawal = sims_matrix(
        rows=n_months,
        cols=n_simulations,
        mean=monthly_withdrawal,
        stdev=0.05)

    # Simulate withdrawals
    sims = np.full((n_months + 1, n_simulations), float(start_capital))
    for j in range(n_months):
        sims[j + 1, :] = (
            sims[j, :] *
            (1 + monthly_returns[j, :] - monthly_inflation[j, :]) -
            monthly_withdrawal[j, :]
        )

    # Set sims values below 0 to NaN
    sims[sims < 0] = np.nan

    # convert to millions
    sims = sims / 1000000

    return pd.DataFrame(sims)


def withdrawal_plot(nav_df, scenario_percent, retire_age):
    # For the histogram, we will fill NaNs with -1
    nav_df_zeros = nav_df.ffill().fillna(0).iloc[-1, :]

    # Define the figure and axes
    fig = plt.figure()

    # Create the top plot for time series on the first row that spans all columns
    ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)

    # Create the bottom left plot for the percentage above zero
    ax2 = plt.subplot2grid((2, 2), (1, 0), colspan=2)

    # Create x-axis in years
    xlabs = np.linspace(0, nav_df.shape[0]/12, num=nav_df.shape[0]) + retire_age

    for column in nav_df.columns:
        ax1.plot(xlabs, nav_df[column], alpha=0.3)

    ax1.set_xlim(min(xlabs), max(xlabs))
    ax1.xaxis.set_minor_locator(AutoMinorLocator())
    ax1.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('${x:,.0f}'))
    ax1.spines['top'].set_visible(False)
    ax1.spines['right'].set_visible(False)
    ax1.title.set_text(f"Projected value of capital over {int(nav_df[1:].shape[0]/12)} years")
    ax1.grid(True, alpha=0.5)

    # Calculate the percentage of columns that are above zero for each date and plot (bottom left plot)
    percent_above_zero = (nav_df > 0).sum(axis=1) / nav_df.shape[1] * 100
    ax2.plot(
        xlabs[percent_above_zero>scenario_percent],
        percent_above_zero[percent_above_zero>scenario_percent], color='darkgreen', linewidth=2)
    ax2.plot(
        xlabs[percent_above_zero<scenario_percent], percent_above_zero[percent_above_zero<scenario_percent], color='darkred', linewidth=2)
    ax2.plot(
        xlabs[(percent_above_zero>=scenario_percent-2.5) & (percent_above_zero<=scenario_percent+2.5)], 
        percent_above_zero[(percent_above_zero>=scenario_percent-2.5) & (percent_above_zero<=scenario_percent+2.5)], color='khaki', linewidth=2)
    ax2.set_xlim(min(xlabs), max(xlabs))
    ax2.xaxis.set_minor_locator(AutoMinorLocator())
    ax2.set_ylim(0, 105)  # Percentage goes from 0 to 100 with buffer
    ax2.yaxis.set_major_formatter('{x:.0f}%')
    ax2.title.set_text("Percent of scenarios still paying out")
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    ax2.set_xlabel("Age")
    ax2.grid(True, alpha=0.5)
    ax2.fill_between(x=xlabs, y1=percent_above_zero, color="red", 
        alpha=0.2, where=percent_above_zero<scenario_percent-2.5)
    ax2.fill_between(x=xlabs, y1=percent_above_zero, color="green", 
        alpha=0.2, where=percent_above_zero>scenario_percent+2.5)
    ax2.fill_between(
        x=xlabs[(percent_above_zero>=scenario_percent-2.5) & (percent_above_zero<=scenario_percent+2.5)], 
        y1=percent_above_zero[(percent_above_zero>=scenario_percent-2.5) & (percent_above_zero<=scenario_percent+2.5)], color='yellow', alpha=0.2)

    plt.tight_layout()

    return fig

```

```{python}
#| title: Parameters
#| expandable: false

ui.input_numeric("starting_salary", "Starting salary", value=100000)

ui.input_numeric("initial_investment", "Initial investment", value=200000)

# ui.input_slider("growth_return_mean", "Average annual investment return while saving", 0, 12, value=4.0, step=0.5, post="%")
ui.input_numeric("growth_return_mean", "Mean annual savings return (%)", value=4.0)

# ui.input_slider("monthly_contribution", "Monthly contributions to retirement savings", 0, 10000, value=2000, step=100, pre="$")
ui.input_numeric("monthly_contribution", "Monthly contributions", value=2000)

# ui.input_slider("raise_mean", "Average annual salary raise percentage", 0, 5, value=1.01, step=0.01, post="%")
ui.input_numeric("raise_mean", "Mean annual salary raise (%)", value=1.01)

# ui.input_slider("retire_age", "Age at retiremenet", 55, 75, value=62, step=1)
ui.input_numeric("retire_age", "Age at retiremenet", value=62)
```


## Column


```{python}
@render_widget
def growth():
    # print(1986 + input.retire_age() - pd.to_datetime('today').year)
    growth_years = int(1986 + input.retire_age() - pd.to_datetime('today').year)
    growth_df = growth_simulation(
        start_capital=input.initial_investment(),
        return_mean=input.growth_return_mean(),
        # return_stdev=8,
        return_stdev=0,
        # raise_mean=0,
        raise_mean=input.raise_mean(),
        # raise_stdev=0.0083,
        raise_stdev=0,
        monthly_contribution=input.monthly_contribution(),
        n_years=growth_years,
        n_simulations=100)
    
    return growth_plot(growth_df)
``` 

# Retirement

## {.sidebar}

```{python}
#| title: Parameters
#| expandable: false

# ui.input_slider("retire_age", "Age at retiremenet", 55, 75, value=62, step=1)
ui.input_numeric("retire_age", "Age at retiremenet", value=62)

# ui.input_slider("start_capital", "Starting retirement balance", 1e4, 1e7, value=1e6, pre="$")
ui.input_numeric("start_capital", "Starting retirement balance", value=1e6)

# ui.input_slider("retirement_return_mean", "Average annual investment return in retirement (Bond market averages 2.5%)", 0, 12, value=2.5, step=0.5, post="%")
ui.input_numeric("retirement_return_mean", "Average annual investment return in retirement (Bond market averages 2.5%)", value=2.5)

# ui.input_slider("inflation_mean", "Average annual inflation", 0, 20, value=2.5, step=0.5, post="%")
ui.input_numeric("inflation_mean", "Average annual inflation (%)", value=2.5)

# ui.input_slider("monthly_withdrawal", "Monthly withdrawals", 0, 20000, value=2000, step=100, pre="$")
ui.input_numeric("monthly_withdrawal", "Monthly withdrawals", value=2000)

# ui.input_slider("scenario_percent", "Target perecent of scenarios paying out", 50, 100, value=90, step=5, post="%")
ui.input_numeric("scenario_percent", "Target perecent of scenarios paying out", value=90)
```

## Column

```{python}
@render.plot()
def nav_1():
    nav_df = withdrawal_simulation(
        start_capital=input.start_capital(),
        return_mean=input.retirement_return_mean(),
        return_stdev=0.07,
        inflation_mean=input.inflation_mean(),
        inflation_stdev=0.015,
        monthly_withdrawal=input.monthly_withdrawal(),
        n_years=40,
        n_simulations=100)

    return withdrawal_plot(
        nav_df,
        scenario_percent=input.scenario_percent(), 
        retire_age=input.retire_age())
``` 
