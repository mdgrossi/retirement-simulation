---
title: "Retirement: Simulating wealth with random returns, inflation, and withdrawals"
format: dashboard
logo: retirement-logo.png
server: shiny
---

# Saving

## {.sidebar}

```{python}
#| context: setup
import numpy as np
import pandas as pd
import investpy as ip
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator
from shiny import render, reactive, ui
from bokeh.plotting import figure, show, output_file
from shinywidgets import render_widget
from bokeh.io import output_notebook
output_notebook(hide_banner=True)
```

```{python}
#| title: Parameters
#| expandable: false

ui.input_numeric("starting_salary", "Starting salary", value=100000)

ui.input_numeric("initial_investment", "Initial investment", value=200000)

# ui.input_slider("growth_return_mean", "Average annual investment return while saving", 0, 12, value=4.0, step=0.5, post="%")
ui.input_numeric("growth_return_mean", "Mean annual savings return (%)", value=4.0)

# ui.input_slider("monthly_contribution", "Monthly contributions to retirement savings", 0, 10000, value=2000, step=100, pre="$")
ui.input_numeric("monthly_contribution", "Monthly contributions", value=2000)

# ui.input_slider("raise_mean", "Average annual salary raise percentage", 0, 5, value=1.01, step=0.01, post="%")
ui.input_numeric("raise_mean", "Mean annual salary raise (%)", value=1.01)

# ui.input_slider("retire_age", "Age at retiremenet", 55, 75, value=62, step=1)
ui.input_numeric("retire_age", "Age at retiremenet", value=62)
```


## Column


```{python}
@render_widget
def growth():
    # print(1986 + input.retire_age() - pd.to_datetime('today').year)
    growth_years = int(1986 + input.retire_age() - pd.to_datetime('today').year)
    growth_df = ip.growth_simulation(
        start_capital=input.initial_investment(),
        return_mean=input.growth_return_mean(),
        # return_stdev=8,
        return_stdev=0,
        # raise_mean=0,
        raise_mean=input.raise_mean(),
        # raise_stdev=0.0083,
        raise_stdev=0,
        monthly_contribution=input.monthly_contribution(),
        n_years=growth_years,
        n_simulations=100)
    
    return ip.growth_plot(growth_df)
``` 

# Retirement

## {.sidebar}

```{python}
#| title: Parameters
#| expandable: false

# ui.input_slider("retire_age", "Age at retiremenet", 55, 75, value=62, step=1)
ui.input_numeric("retire_age", "Age at retiremenet", value=62)

# ui.input_slider("start_capital", "Starting retirement balance", 1e4, 1e7, value=1e6, pre="$")
ui.input_numeric("start_capital", "Starting retirement balance", value=1e6)

# ui.input_slider("retirement_return_mean", "Average annual investment return in retirement (Bond market averages 2.5%)", 0, 12, value=2.5, step=0.5, post="%")
ui.input_numeric("retirement_return_mean", "Average annual investment return in retirement (Bond market averages 2.5%)", value=2.5)

# ui.input_slider("inflation_mean", "Average annual inflation", 0, 20, value=2.5, step=0.5, post="%")
ui.input_numeric("inflation_mean", "Average annual inflation (%)", value=2.5)

# ui.input_slider("monthly_withdrawal", "Monthly withdrawals", 0, 20000, value=2000, step=100, pre="$")
ui.input_numeric("monthly_withdrawal", "Monthly withdrawals", value=2000)

# ui.input_slider("scenario_percent", "Target perecent of scenarios paying out", 50, 100, value=90, step=5, post="%")
ui.input_numeric("scenario_percent", "Target perecent of scenarios paying out", value=90)
```

## Column

```{python}
@render.plot()
def nav_1():
    nav_df = ip.withdrawal_simulation(
        start_capital=input.start_capital(),
        return_mean=input.retirement_return_mean(),
        return_stdev=0.07,
        inflation_mean=input.inflation_mean(),
        inflation_stdev=0.015,
        monthly_withdrawal=input.monthly_withdrawal(),
        n_years=40,
        n_simulations=100)

    return ip.withdrawal_plot(
        nav_df,
        scenario_percent=input.scenario_percent(), 
        retire_age=input.retire_age())
``` 
